interface Button {
    fun render()
}

interface Checkbox {
    fun render()
}

class WindowsButton : Button {
    override fun render() {
        println("Відображення кнопки Windows")
    }
}

class MacButton : Button {
    override fun render() {
        println("Відображення кнопки Mac")
    }
}

class WindowsCheckbox : Checkbox {
    override fun render() {
        println("Відображення прапорця Windows")
    }
}

class MacCheckbox : Checkbox {
    override fun render() {
        println("Відображення прапорця Mac")
    }
}

interface GUIFactory {
    fun createButton(): Button
    fun createCheckbox(): Checkbox
}

class WindowsFactory : GUIFactory {
    override fun createButton(): Button {
        return WindowsButton()
    }

    override fun createCheckbox(): Checkbox {
        return WindowsCheckbox()
    }
}

class MacFactory : GUIFactory {
    override fun createButton(): Button {
        return MacButton()
    }

    override fun createCheckbox(): Checkbox {
        return MacCheckbox()
    }
}

class Application(private val factory: GUIFactory) {
    private lateinit var button: Button
    private lateinit var checkbox: Checkbox

    fun createUI() {
        button = factory.createButton()
        checkbox = factory.createCheckbox()
    }

    fun renderUI() {
        button.render()
        checkbox.render()
    }
}

fun main() {
    val windowsFactory: GUIFactory = WindowsFactory()
    val windowsApp = Application(windowsFactory)
    windowsApp.createUI()
    windowsApp.renderUI()

    val macFactory: GUIFactory = MacFactory()
    val macApp = Application(macFactory)
    macApp.createUI()
    macApp.renderUI()
}
